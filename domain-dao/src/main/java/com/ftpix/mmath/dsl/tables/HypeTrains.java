/*
 * This file is generated by jOOQ.
 */
package com.ftpix.mmath.dsl.tables;


import com.ftpix.mmath.dsl.Indexes;
import com.ftpix.mmath.dsl.Keys;
import com.ftpix.mmath.dsl.Mmath;
import com.ftpix.mmath.dsl.tables.records.HypeTrainsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HypeTrains extends TableImpl<HypeTrainsRecord> {

    private static final long serialVersionUID = 2074690822;

    /**
     * The reference instance of <code>mmath.hype_trains</code>
     */
    public static final HypeTrains HYPE_TRAINS = new HypeTrains();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HypeTrainsRecord> getRecordType() {
        return HypeTrainsRecord.class;
    }

    /**
     * The column <code>mmath.hype_trains.user</code>.
     */
    public final TableField<HypeTrainsRecord, String> USER = createField("user", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>mmath.hype_trains.fighter</code>.
     */
    public final TableField<HypeTrainsRecord, String> FIGHTER = createField("fighter", org.jooq.impl.SQLDataType.VARCHAR(1000).nullable(false), this, "");

    /**
     * Create a <code>mmath.hype_trains</code> table reference
     */
    public HypeTrains() {
        this(DSL.name("hype_trains"), null);
    }

    /**
     * Create an aliased <code>mmath.hype_trains</code> table reference
     */
    public HypeTrains(String alias) {
        this(DSL.name(alias), HYPE_TRAINS);
    }

    /**
     * Create an aliased <code>mmath.hype_trains</code> table reference
     */
    public HypeTrains(Name alias) {
        this(alias, HYPE_TRAINS);
    }

    private HypeTrains(Name alias, Table<HypeTrainsRecord> aliased) {
        this(alias, aliased, null);
    }

    private HypeTrains(Name alias, Table<HypeTrainsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> HypeTrains(Table<O> child, ForeignKey<O, HypeTrainsRecord> key) {
        super(child, key, HYPE_TRAINS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Mmath.MMATH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.HYPE_TRAINS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<HypeTrainsRecord> getPrimaryKey() {
        return Keys.KEY_HYPE_TRAINS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<HypeTrainsRecord>> getKeys() {
        return Arrays.<UniqueKey<HypeTrainsRecord>>asList(Keys.KEY_HYPE_TRAINS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HypeTrains as(String alias) {
        return new HypeTrains(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HypeTrains as(Name alias) {
        return new HypeTrains(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HypeTrains rename(String name) {
        return new HypeTrains(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HypeTrains rename(Name name) {
        return new HypeTrains(name, null);
    }
}
