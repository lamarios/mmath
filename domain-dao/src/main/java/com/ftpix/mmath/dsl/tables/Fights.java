/*
 * This file is generated by jOOQ.
 */
package com.ftpix.mmath.dsl.tables;


import com.ftpix.mmath.dsl.Indexes;
import com.ftpix.mmath.dsl.Keys;
import com.ftpix.mmath.dsl.Mmath;
import com.ftpix.mmath.dsl.tables.records.FightsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Fights extends TableImpl<FightsRecord> {

    private static final long serialVersionUID = 858395231;

    /**
     * The reference instance of <code>mmath.fights</code>
     */
    public static final Fights FIGHTS = new Fights();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FightsRecord> getRecordType() {
        return FightsRecord.class;
    }

    /**
     * The column <code>mmath.fights.id</code>.
     */
    public final TableField<FightsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>mmath.fights.fighter1_id</code>.
     */
    public final TableField<FightsRecord, String> FIGHTER1_ID = createField("fighter1_id", org.jooq.impl.SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>mmath.fights.fighter2_id</code>.
     */
    public final TableField<FightsRecord, String> FIGHTER2_ID = createField("fighter2_id", org.jooq.impl.SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>mmath.fights.event_id</code>.
     */
    public final TableField<FightsRecord, String> EVENT_ID = createField("event_id", org.jooq.impl.SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>mmath.fights.date</code>.
     */
    public final TableField<FightsRecord, Timestamp> DATE = createField("date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>mmath.fights.result</code>.
     */
    public final TableField<FightsRecord, String> RESULT = createField("result", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>mmath.fights.winMethod</code>.
     */
    public final TableField<FightsRecord, String> WINMETHOD = createField("winMethod", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>mmath.fights.winTime</code>.
     */
    public final TableField<FightsRecord, String> WINTIME = createField("winTime", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>mmath.fights.winRound</code>.
     */
    public final TableField<FightsRecord, Integer> WINROUND = createField("winRound", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>mmath.fights.lastUpdate</code>.
     */
    public final TableField<FightsRecord, Timestamp> LASTUPDATE = createField("lastUpdate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>mmath.fights.fight_type</code>.
     */
    public final TableField<FightsRecord, String> FIGHT_TYPE = createField("fight_type", org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("PRO", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>mmath.fights</code> table reference
     */
    public Fights() {
        this(DSL.name("fights"), null);
    }

    /**
     * Create an aliased <code>mmath.fights</code> table reference
     */
    public Fights(String alias) {
        this(DSL.name(alias), FIGHTS);
    }

    /**
     * Create an aliased <code>mmath.fights</code> table reference
     */
    public Fights(Name alias) {
        this(alias, FIGHTS);
    }

    private Fights(Name alias, Table<FightsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Fights(Name alias, Table<FightsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Fights(Table<O> child, ForeignKey<O, FightsRecord> key) {
        super(child, key, FIGHTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Mmath.MMATH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FIGHTS_PRIMARY, Indexes.FIGHTS_PRIMARY_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FightsRecord, Long> getIdentity() {
        return Keys.IDENTITY_FIGHTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FightsRecord> getPrimaryKey() {
        return Keys.KEY_FIGHTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FightsRecord>> getKeys() {
        return Arrays.<UniqueKey<FightsRecord>>asList(Keys.KEY_FIGHTS_PRIMARY, Keys.KEY_FIGHTS_PRIMARY_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Fights as(String alias) {
        return new Fights(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Fights as(Name alias) {
        return new Fights(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Fights rename(String name) {
        return new Fights(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Fights rename(Name name) {
        return new Fights(name, null);
    }
}
